// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  cases         Case[]    @relation("CaseAssignedTo")
  
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Client model
model Client {
  id             String   @id @default(cuid())
  name           String
  email          String?
  phone          String?
  address        String?
  client_metadata Json?   @db.JsonB // Flexible metadata storage
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  updatedBy      String?

  cases          Case[]
  
  @@map("clients")
}

// Case model (Workspace)
model Case {
  id               String    @id @default(cuid())
  title            String
  caseNumber       String    @unique
  description      String?   @db.Text
  status           String    @default("active") // active, pending, completed, closed
  type             String?   // civil, criminal, estate, property, contract, ip, family, corporate
  filingDate       DateTime?
  nextHearing      DateTime?
  estimatedValue   String?
  case_metadata    Json?     @db.JsonB // Flexible metadata storage
  
  // Client relationship
  clientId         String
  client           Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Assigned attorney
  assignedToId     String?
  assignedTo       User?     @relation("CaseAssignedTo", fields: [assignedToId], references: [id])
  
  // Audit fields
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?
  updatedBy        String?
  
  // Relations
  documents        Document[]
  notes            CaseNote[]
  strategies       CaseStrategy[]
  
  @@map("cases")
}

// Document model
model Document {
  id                String   @id @default(cuid())
  title             String
  description       String?  @db.Text
  fileUrl           String   // S3 URL or file path
  fileName          String
  fileSize          Int?
  mimeType          String?
  category          String?  // Document category from AI
  categoryRationale String?  @db.Text // AI reasoning for category
  s3Bucket          String?  // S3 bucket name
  s3Key             String?  // S3 object key
  document_metadata Json?    @db.JsonB // Flexible metadata storage
  
  // Case relationship
  caseId            String
  case              Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  uploadedBy        String?
  
  @@map("documents")
}

// Case Notes model for manual notes
model CaseNote {
  id        String   @id @default(cuid())
  title     String?
  content   String   @db.Text
  
  // Case relationship
  caseId    String
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
  
  @@map("case_notes")
}

// Case Strategy model for AI-generated strategies with versioning
model CaseStrategy {
  id                String   @id @default(cuid())
  version           Int      @default(1)
  title             String
  content           String   @db.Text
  summary           String?  @db.Text
  aiModel           String   @default("gemini-2.0-flash-exp")
  generationReason  String?  @db.Text // Why this strategy was generated
  strategy_metadata Json?    @db.JsonB // Additional AI analysis data
  
  // Case relationship
  caseId            String
  case              Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  generatedBy       String?  // User who triggered the generation
  
  @@map("case_strategies")
}
